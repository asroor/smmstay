{"version":3,"sources":["main.js"],"names":["userCard","document","getElementById","countNum","counterSpeed","process","formatNumber","num","replace","startCounting","item","currentValue","animate","value","min","increment","textContent","getAttribute","ceil","onScroll","scrollPosition","window","innerHeight","forEach","getBoundingClientRect","top","loadLine","classList","add","typingElements","addEventListener","querySelectorAll","isElementInViewport","el","rect","windowHeight","documentElement","clientHeight","bottom","index","element","text","delay","interval","setInterval","length","charAt","clearInterval","startTyping","counters","counter","target","updateCounter","parseFloat","count","innerText","toFixed","setTimeout","typeText","removeEventListener","sidebarBtn","querySelector","closeBg","sidebar","body","overflow","style","closeAll","remove"],"mappings":"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","file":"main.min.js","sourcesContent":["\"use strict\";\nconst userCard = document.getElementById('user');\nconst countNum = document.querySelectorAll('.counting-num');\nconst counterSpeed = 150; // Adjusted speed control\nconst process = document.getElementById('process');\nconst loadLine = document.querySelectorAll('.load-line');\n// Function to format the number with a period as a thousands separator\nconst formatNumber = (num) => {\n    return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, '.');\n};\n// Function to start counting animation\nconst startCounting = (item) => {\n    const value = +item.getAttribute('num');\n    const data = parseInt(item.textContent.replace(/\\./g, ''), 10) || 0; // Use textContent\n    const increment = Math.ceil(value / counterSpeed); // Calculate incremental steps\n    let currentValue = data;\n    const animate = () => {\n        if (currentValue < value) {\n            currentValue = Math.min(currentValue + increment, value);\n            item.textContent = formatNumber(currentValue); // Use textContent\n            requestAnimationFrame(animate); // Smooth animation control\n        }\n        else {\n            item.textContent = formatNumber(value); // Ensure final value is displayed correctly\n        }\n    };\n    animate(); // Start the animation\n};\nconst onScroll = () => {\n    const scrollPosition = window.innerHeight - 400; // 400px offset\n    countNum.forEach(item => {\n        const blockPosition = item.getBoundingClientRect().top;\n        if (blockPosition < scrollPosition) {\n            startCounting(item);\n        }\n    });\n    if (process) {\n        const blockPosition = process.getBoundingClientRect().top;\n        if (blockPosition < scrollPosition) {\n            loadLine.forEach(item => {\n                item.classList.add('active');\n            });\n            countNum.forEach(item => {\n                startCounting(item);\n            });\n        }\n    }\n};\n// Add scroll event listener\nwindow.addEventListener('scroll', onScroll);\n// TypeScript code\nconst typingElements = userCard.querySelectorAll('.typing');\nfunction isElementInViewport(el) {\n    const rect = el.getBoundingClientRect();\n    const windowHeight = (window.innerHeight || document.documentElement.clientHeight);\n    return (rect.top <= windowHeight * 0.5 &&\n        rect.bottom >= windowHeight * 0.5);\n}\nfunction typeText(element, text, delay) {\n    let index = 0;\n    element.textContent = ''; // Clear the text\n    const interval = setInterval(() => {\n        if (index < text.length) {\n            element.textContent += text.charAt(index);\n            index++;\n        }\n        else {\n            clearInterval(interval);\n        }\n    }, delay);\n}\nfunction startTyping() {\n    if (userCard && isElementInViewport(userCard)) {\n        // Elementlarni DOMdan olish\n        const counters = document.querySelectorAll('.counter');\n        // Har bir counter uchun funksiyani boshlash\n        counters.forEach((counter) => {\n            const updateCounter = () => {\n                // Atributdan olingan qiymatni raqamga o'girish\n                const target = parseFloat(counter.getAttribute('data-target').replace('+', ''));\n                const count = parseFloat(counter.innerText);\n                // O'sish miqdorini hisoblash\n                const increment = target / 800;\n                // Maqsadga yetguncha raqamni oshirish\n                if (count < target) {\n                    counter.innerText = (count + increment).toFixed(3); // Kasr sonni 3 xonali qilish\n                    setTimeout(updateCounter, 1); // 1 ms kutish\n                }\n                else {\n                    counter.innerText = target.toFixed(3); // Maqsad raqamni to'g'ri formatlash\n                }\n            };\n            // Funksiyani ishga tushirish\n            updateCounter();\n        });\n        typingElements.forEach((element, index) => {\n            const text = element.getAttribute('data-text');\n            if (text) {\n                setTimeout(() => {\n                    typeText(element, text, 100); // Adjust delay as needed\n                }, index * 2500); // Delay between texts\n            }\n        });\n        // Remove the scroll event listener after typing to prevent it from triggering again\n        window.removeEventListener('scroll', startTyping);\n    }\n}\n// Add scroll and load event listeners\nwindow.addEventListener('scroll', startTyping);\nwindow.addEventListener('load', startTyping); // Initial check on page load\nconst closeAll = document.querySelectorAll('.close-all');\nconst sidebarBtn = document.querySelector('.sidebar-btn');\nconst closeBg = document.querySelector('.close-bg');\nconst sidebar = document.querySelector('.sidebar');\nconst body = document.querySelector('body');\nsidebarBtn === null || sidebarBtn === void 0 ? void 0 : sidebarBtn.addEventListener('click', () => {\n    body.style.overflow = 'hidden';\n    closeBg.classList.add('active');\n    sidebar.classList.add('show');\n});\ncloseAll === null || closeAll === void 0 ? void 0 : closeAll.forEach(item => {\n    item.addEventListener('click', () => {\n        closeBg.classList.remove('active');\n        sidebar.classList.remove('show');\n        body.style.overflow = 'auto';\n    });\n});\n"]}